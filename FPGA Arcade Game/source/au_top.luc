module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] ,    // DIP switches on IO Shield
    
    input input_buttons[16],
    
    output led_row_1,
    output led_row_2,
    output led_row_3,
    output led_row_4,
    output led_row_5,
    /**
    output led_row_6,
    output led_row_7,
    output led_row_8,
    output led_row_9,
    output led_row_10,
     **/
    output led_lives,
    output sev_seg[8],
    output sev_seg_sel[4]
  ) {
  
  sig rst;                  // reset signal
  
  /**
  alu_usage alu(.clk(clk), .rst(rst));
  alu_tester tester(.clk(clk), .rst(rst));
  button_conditioner buttonconditioner(.clk(clk));
  edge_detector buttonedge(#RISE(1), #FALL(0), .clk(clk));
  **/
  
  .clk(clk) {
    .rst(rst) {
      multi_seven_seg seg;
      beta cpu;
      led_driver led_rows;
      buttons_manager buttons;
    }
    
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    multi_dec_ctr dec_ctr;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    buttons.buttons = input_buttons;
    
    cpu.buttons = buttons.out;
    
    // io_led[0] = input_buttons[7:0];
    // io_led[1] = input_buttons[15:8];
    
    led_rows.row1 = cpu.row1;
    led_rows.row2 = cpu.row2;
    led_rows.row3 = cpu.row3;
    led_rows.row4 = cpu.row4;
    led_rows.row5 = cpu.row5;
    /**
    led_rows.row6 = cpu.row6;
    led_rows.row7 = cpu.row7;
    led_rows.row8 = cpu.row8;
    led_rows.row9 = cpu.row9;
    led_rows.row10 = cpu.row10;
       **/
    led_rows.lives = cpu.lives_output[2:0];
    
    led_row_1 = led_rows.led1;
    led_row_2 = led_rows.led2;
    led_row_3 = led_rows.led3;
    led_row_4 = led_rows.led4;
    led_row_5 = led_rows.led5;
    /**
    led_row_6 = led_rows.led6;
    led_row_7 = led_rows.led7;
    led_row_8 = led_rows.led8;
    led_row_9 = led_rows.led9;
    led_row_10 = led_rows.led10;
    **/
    led_lives = led_rows.ledlives;
    // io_led[1] = cpu.row10[15:8];
    // io_led[0] = cpu.row10[7:0];
    
    dec_ctr.inc = cpu.sev_seg_incr;
    dec_ctr.rst = cpu.sev_seg_rst;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    sev_seg = seg.seg;
    sev_seg_sel = seg.sel;
    /**
    buttonconditioner.in = io_button[0];
    buttonedge.in = buttonconditioner.out;
    
    if (io_dip[2][7]) {
      io_led[0] = tester.out[7:0];
      io_led[1] = tester.out[15:8];
      io_led[2][2:0] = tester.out[18:16];
      io_led[2][7] = tester.out[19];
    } else {
      io_led[0] = alu.out[7:0];
      io_led[1] = alu.out[15:8];
      io_led[2] = alu.out[19:16];
    }
    
    tester.a_switch = io_dip[0][0];
    tester.b_switch = io_dip[0][1];
    tester.alufn_switch = io_dip[0][2];
    tester.flip_switch = io_dip[2][0];
    alu.button = buttonedge.out;
    alu.switches[7:0] = io_dip[0];
    alu.switches[15:8] = io_dip[1];
    **/
  }
}